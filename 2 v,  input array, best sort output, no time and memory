#include <iostream>
#include <chrono>
#include <algorithm>

using namespace std;

void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (arr[j] > arr[j+1]) {
                swap(arr[j], arr[j+1]);
            }
        }
    }
}

void selectionSort(int arr[], int n) {
    for (int i = 0; i < n-1; i++) {
        int minIndex = i;
        for (int j = i+1; j < n; j++) {
            if (arr[j] < arr[minIndex]) {
                minIndex = j;
            }
        }
        swap(arr[i], arr[minIndex]);
    }
}

void insertionSort(int arr[], int n) {
    for (int i = 1; i < n; i++) {
        int key = arr[i];
        int j = i-1;
        while (j >= 0 && arr[j] > key) {
            arr[j+1] = arr[j];
            j--;
        }
        arr[j+1] = key;
    }
}

void merge(int arr[], int l, int m, int r) {
    int n1 = m - l + 1;
    int n2 = r - m;
    int L[n1], R[n2];
    for (int i = 0; i < n1; i++) {
        L[i] = arr[l + i];
    }
    for (int j = 0; j < n2; j++) {
        R[j] = arr[m + 1 + j];
    }
    int i = 0;
    int j = 0;
    int k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        }
        else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(int arr[], int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;
        mergeSort(arr, l, m);
        mergeSort(arr, m+1, r);
        merge(arr, l, m, r);
    }
}

int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = low - 1;
    for (int j = low; j <= high-1; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i+1], arr[high]);
    return i+1;
}

void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi-1);
        quickSort(arr, pi+1, high);
    }
}

void heapify(int arr[], int n, int i) {
    int largest = i;
    int l = 2*i + 1;
    int r = 2*i + 2;
if (l < n && arr[l] > arr[largest]) {
    largest = l;
}
if (r < n && arr[r] > arr[largest]) {
    largest = r;
}
if (largest != i) {
    swap(arr[i], arr[largest]);
    heapify(arr, n, largest);
}
}

void heapSort(int arr[], int n) {
for (int i = n/2 - 1; i >= 0; i--) {
heapify(arr, n, i);
}
for (int i = n-1; i >= 0; i--) {
swap(arr[0], arr[i]);
heapify(arr, i, 0);
}
}

string findOptimalSortingAlgorithm(int arr[], int n) {
string algorithms[6] = {"Bubble Sort", "Selection Sort", "Insertion Sort", "Merge Sort", "Quick Sort", "Heap Sort"};
auto start = chrono::high_resolution_clock::now();
bubbleSort(arr, n);
auto stop = chrono::high_resolution_clock::now();
auto time = chrono::duration_cast<chrono::microseconds>(stop - start).count();
long long minTime = time;
string optimalAlgorithm = algorithms[0];
for (int i = 1; i < 6; i++) {
start = chrono::high_resolution_clock::now();
switch (i) {
case 1:
selectionSort(arr, n);
break;
case 2:
insertionSort(arr, n);
break;
case 3:
mergeSort(arr, 0, n-1);
break;
case 4:
quickSort(arr, 0, n-1);
break;
case 5:
heapSort(arr, n);
break;
}
stop = chrono::high_resolution_clock::now();
time = chrono::duration_cast<chrono::microseconds>(stop - start).count();
if (time < minTime) {
minTime = time;
optimalAlgorithm = algorithms[i];
}
}
return optimalAlgorithm;
}

int main() {
int n;
cout << "Enter the size of the array: ";
cin >> n;
int arr[n];
cout << "Enter the elements of the array: ";
for (int i = 0; i < n; i++) {
cin >> arr[i];
}
string algorithm = findOptimalSortingAlgorithm(arr, n);
cout << "The most optimal sorting algorithm for the given array is: " << algorithm << endl;
return 0;
}
